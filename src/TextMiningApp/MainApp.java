package TextMiningApp;

import AIToolkit.Bayes.NaiveBayes;
import AIToolkit.TextMining.BagOfWords;
import AIToolkit.TextMining.TextCleaner;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Luan
 */
public class MainApp extends javax.swing.JFrame {

    private boolean isTrained = false;
    private NaiveBayes nb;
    private BagOfWords bag;

    /**
     * Creates new form MainApp
     */
    public MainApp() {
        initComponents();

        loadBag();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        controls = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtBaseLocation = new javax.swing.JTextField();
        btnTrain = new javax.swing.JButton();
        btnDetect = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        chkType = new javax.swing.JRadioButton();
        chkSentiment = new javax.swing.JRadioButton();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtInput = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        txtStatus = new javax.swing.JLabel();
        loading = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        controls.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Base location:");

        txtBaseLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBaseLocationActionPerformed(evt);
            }
        });

        btnTrain.setText("Train");
        btnTrain.setToolTipText("<html>By clicking this button you will select a file or folder (depending <br>\nof which dataset you chose) to train. After training the file will be <br>\nsaved in the root folder of this application and will be loaded <br>\nautomatically when you switch the dataset option.");
        btnTrain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTrainActionPerformed(evt);
            }
        });

        btnDetect.setText("DETECT");
        btnDetect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetectActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        buttonGroup1.add(chkType);
        chkType.setText("Type identification");
        chkType.setToolTipText("<html>\n<b>Type identification:</b><br>\nWhen this option is selected, the application will expect to receive <br>\nthe 20_news_group dataset to train. The file \"bagofwords.dll\" will be <br>\ncreated in the root folder of the application, if the file already exists, it <br>\nwill be overrided. The application will attemp to load the trained file <br>\nwhen this option is selected.");
        chkType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkTypeActionPerformed(evt);
            }
        });

        buttonGroup1.add(chkSentiment);
        chkSentiment.setSelected(true);
        chkSentiment.setText("Sentiment analysis");
        chkSentiment.setToolTipText("<html>\n<b>Sentiment analysis</b>\nWhen this option is selected, the application will expect to receive the <br>\n\"UCI's Machine Learning for Sentiment Analysis\" dataset to train.<br>\nThe file \"bag_sentiment.dll\" will be created in the root folder of the <br>\napplication, if the file already exists, it will be overrided. The application <br>\nwill attemp to load the trained file when this option is selected.");
        chkSentiment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSentimentActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout controlsLayout = new javax.swing.GroupLayout(controls);
        controls.setLayout(controlsLayout);
        controlsLayout.setHorizontalGroup(
            controlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlsLayout.createSequentialGroup()
                        .addComponent(txtBaseLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTrain))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(controlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkSentiment)
                    .addComponent(chkType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDetect)
                .addGap(14, 14, 14))
        );
        controlsLayout.setVerticalGroup(
            controlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(controlsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDetect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(controlsLayout.createSequentialGroup()
                        .addGroup(controlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(controlsLayout.createSequentialGroup()
                                .addComponent(chkType)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chkSentiment))
                            .addGroup(controlsLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(controlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtBaseLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnTrain))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jSeparator2)
        );

        txtInput.setColumns(20);
        txtInput.setLineWrap(true);
        txtInput.setRows(5);
        txtInput.setWrapStyleWord(true);
        jScrollPane1.setViewportView(txtInput);

        txtStatus.setText("Please, select the base location.");

        loading.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TextMiningApp/Resources/loading.gif"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(loading, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(loading)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtStatus)
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(controls, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(controls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDetectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetectActionPerformed
        if (bag == null || nb == null) {
            loadBag();
        }

        String[] words = TextCleaner.with(txtInput.getText())
                .stripAccents()
                .stripNumbers()
                .stripStopWords(false)
                .getWords();
        JOptionPane.showMessageDialog(this, nb.classify(words));
    }//GEN-LAST:event_btnDetectActionPerformed

    private void chkSentimentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSentimentActionPerformed
        loadBag();
    }//GEN-LAST:event_chkSentimentActionPerformed

    private void chkTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkTypeActionPerformed
        loadBag();
    }//GEN-LAST:event_chkTypeActionPerformed

    private void btnTrainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTrainActionPerformed
        if (isTrained || txtBaseLocation.getText().equals("")) {
            JFileChooser fc = new JFileChooser();

            if (chkType.isSelected()) {
                fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            }
            if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                txtBaseLocation.setText(fc.getSelectedFile().getPath());
                trainNewDataset();
                isTrained = true;
            }
        } else {
            trainNewDataset();
            isTrained = true;
        }
    }//GEN-LAST:event_btnTrainActionPerformed

    private void txtBaseLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBaseLocationActionPerformed
        loadBag();
    }//GEN-LAST:event_txtBaseLocationActionPerformed

    private void setControlsEnabled(boolean enabled) {
        txtBaseLocation.setEnabled(enabled);
        btnDetect.setEnabled(enabled);
        btnTrain.setEnabled(enabled);
        chkSentiment.setEnabled(enabled);
        chkType.setEnabled(enabled);
    }

    /**
     * This function is responsable to load the dataset.
     *
     * @throws Exception
     */
    private void loadBag() {
        new Thread(() -> {
            setControlsEnabled(false);
            loading.setVisible(true);

            File location = new File(chkSentiment.isSelected() ? "./bag_sentiment.dll" : "./bagofwords.dll");
            txtStatus.setText("Loading: " + location.getName());

            if (!location.exists()) {
                txtStatus.setText("No trained data exists. Please, select and train a new instance of the dataset.");
            } else {
                try {
                    bag = BagOfWords.instanciateFromFile(location);
                    nb = NaiveBayes.with(bag);
                    txtStatus.setText("");
                } catch (Exception ex) {
                    txtStatus.setText("Something went wrong while loading the dataset. Please, train the model again.");
                }
            }

            loading.setVisible(false);
            setControlsEnabled(true);
        }).start();
    }

    /**
     * This function trains the dataset. Each dataset got his own format and
     * there is no way to generalize the reading step all of them.
     *
     * The app is able to read two datasets: - The UCI's Machine Learning
     * Repository for sentiment analysis:
     * https://archive.ics.uci.edu/ml/datasets/Sentiment+Labelled+Sentences -
     * The UCI's Machine Learning Repository for text classification:
     * https://archive.ics.uci.edu/ml/datasets/Twenty+Newsgroups
     *
     */
    private void trainNewDataset() {
        new Thread(() -> {
            loading.setVisible(true);
            setControlsEnabled(false);
            File location = new File(chkSentiment.isSelected() ? "./bag_sentiment.dll" : "./bagofwords.dll");

            try {
                // The user wants the sentiment dataset:
                if (chkSentiment.isSelected()) {
                    // We will assume the user doesn't have a processed bag of words
                    // and wants to create a new one:
                    txtStatus.setText("Processing dataset.");
                    BagOfWords.Creator bCreator = new BagOfWords.Creator();
                    BufferedReader br = new BufferedReader(new FileReader(txtBaseLocation.getText()));

                    String line;
                    while ((line = br.readLine()) != null) {
                        String[] content = line.split("\t");
                        bCreator.addToInstance(content[0], content[1]);
                    }
                    bag = bCreator.saveToFileAndInstanciate(new File("bag_sentiment.dll"));
                } else {
                    BagOfWords.Creator bagCreator = new BagOfWords.Creator();
                    Thread[] t = new Thread[location.listFiles().length];

                    txtStatus.setText("Processing dataset.");
                    int i = 0;
                    for (File className : location.listFiles()) {
                        t[i] = new Thread(() -> {
                            int exq = 0;
                            if (className.isDirectory()) {
                                for (File example : className.listFiles()) {
                                    if (example.isFile()) {
                                        try {
                                            bagCreator.addToInstance(example, className.getName());
                                        } catch (Exception ignored) {
                                        }
                                    } else {
                                        break;
                                    }
                                }
                            }

                            txtStatus.setText(className.getName() + " is done.");
                        });
                        t[i++].start();
                    }

                    // We must wait all the documents to be processed before continue:
                    for (Thread t1 : t) {
                        t1.join();
                    }

                    txtStatus.setText("Saving trained file.");
                    // We will create, save and then load the trained file:
                    bag = bagCreator.saveToFileAndInstanciate(new File("./bagofwords.dll"));
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Something went wrong: " + ex.getMessage());
            }
            txtStatus.setText("");
            loading.setVisible(false);
            setControlsEnabled(true);
        }).start();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDetect;
    private javax.swing.JButton btnTrain;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton chkSentiment;
    private javax.swing.JRadioButton chkType;
    private javax.swing.JPanel controls;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel loading;
    private javax.swing.JTextField txtBaseLocation;
    private javax.swing.JTextArea txtInput;
    private javax.swing.JLabel txtStatus;
    // End of variables declaration//GEN-END:variables
}
